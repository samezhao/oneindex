{
	"name": "test_python_api",
	"properties": {
		"folder": {
			"name": "003"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "0732340f-8bb1-437d-9f20-80fd492d2118"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from ctypes import *\r\n",
					"import unittest, sys\r\n",
					"from test import support\r\n",
					"\r\n",
					"################################################################\r\n",
					"# This section should be moved into ctypes\\__init__.py, when it's ready.\r\n",
					"\r\n",
					"from _ctypes import PyObj_FromPtr\r\n",
					"\r\n",
					"################################################################\r\n",
					"\r\n",
					"from sys import getrefcount as grc\r\n",
					"if sys.version_info > (2, 4):\r\n",
					"    c_py_ssize_t = c_size_t\r\n",
					"else:\r\n",
					"    c_py_ssize_t = c_int\r\n",
					"\r\n",
					"class PythonAPITestCase(unittest.TestCase):\r\n",
					"\r\n",
					"    def test_PyBytes_FromStringAndSize(self):\r\n",
					"        PyBytes_FromStringAndSize = pythonapi.PyBytes_FromStringAndSize\r\n",
					"\r\n",
					"        PyBytes_FromStringAndSize.restype = py_object\r\n",
					"        PyBytes_FromStringAndSize.argtypes = c_char_p, c_py_ssize_t\r\n",
					"\r\n",
					"        self.assertEqual(PyBytes_FromStringAndSize(b\"abcdefghi\", 3), b\"abc\")\r\n",
					"\r\n",
					"    @support.refcount_test\r\n",
					"    def test_PyString_FromString(self):\r\n",
					"        pythonapi.PyBytes_FromString.restype = py_object\r\n",
					"        pythonapi.PyBytes_FromString.argtypes = (c_char_p,)\r\n",
					"\r\n",
					"        s = b\"abc\"\r\n",
					"        refcnt = grc(s)\r\n",
					"        pyob = pythonapi.PyBytes_FromString(s)\r\n",
					"        self.assertEqual(grc(s), refcnt)\r\n",
					"        self.assertEqual(s, pyob)\r\n",
					"        del pyob\r\n",
					"        self.assertEqual(grc(s), refcnt)\r\n",
					"\r\n",
					"    @support.refcount_test\r\n",
					"    def test_PyLong_Long(self):\r\n",
					"        ref42 = grc(42)\r\n",
					"        pythonapi.PyLong_FromLong.restype = py_object\r\n",
					"        self.assertEqual(pythonapi.PyLong_FromLong(42), 42)\r\n",
					"\r\n",
					"        self.assertEqual(grc(42), ref42)\r\n",
					"\r\n",
					"        pythonapi.PyLong_AsLong.argtypes = (py_object,)\r\n",
					"        pythonapi.PyLong_AsLong.restype = c_long\r\n",
					"\r\n",
					"        res = pythonapi.PyLong_AsLong(42)\r\n",
					"        self.assertEqual(grc(res), ref42 + 1)\r\n",
					"        del res\r\n",
					"        self.assertEqual(grc(42), ref42)\r\n",
					"\r\n",
					"    @support.refcount_test\r\n",
					"    def test_PyObj_FromPtr(self):\r\n",
					"        s = \"abc def ghi jkl\"\r\n",
					"        ref = grc(s)\r\n",
					"        # id(python-object) is the address\r\n",
					"        pyobj = PyObj_FromPtr(id(s))\r\n",
					"        self.assertIs(s, pyobj)\r\n",
					"\r\n",
					"        self.assertEqual(grc(s), ref + 1)\r\n",
					"        del pyobj\r\n",
					"        self.assertEqual(grc(s), ref)\r\n",
					"\r\n",
					"    def test_PyOS_snprintf(self):\r\n",
					"        PyOS_snprintf = pythonapi.PyOS_snprintf\r\n",
					"        PyOS_snprintf.argtypes = POINTER(c_char), c_size_t, c_char_p\r\n",
					"\r\n",
					"        buf = c_buffer(256)\r\n",
					"        PyOS_snprintf(buf, sizeof(buf), b\"Hello from %s\", b\"ctypes\")\r\n",
					"        self.assertEqual(buf.value, b\"Hello from ctypes\")\r\n",
					"\r\n",
					"        PyOS_snprintf(buf, sizeof(buf), b\"Hello from %s (%d, %d, %d)\", b\"ctypes\", 1, 2, 3)\r\n",
					"        self.assertEqual(buf.value, b\"Hello from ctypes (1, 2, 3)\")\r\n",
					"\r\n",
					"        # not enough arguments\r\n",
					"        self.assertRaises(TypeError, PyOS_snprintf, buf)\r\n",
					"\r\n",
					"    def test_pyobject_repr(self):\r\n",
					"        self.assertEqual(repr(py_object()), \"py_object(<NULL>)\")\r\n",
					"        self.assertEqual(repr(py_object(42)), \"py_object(42)\")\r\n",
					"        self.assertEqual(repr(py_object(object)), \"py_object(%r)\" % object)\r\n",
					"\r\n",
					"if __name__ == \"__main__\":\r\n",
					"    unittest.main()\r\n",
					""
				],
				"execution_count": null
			}
		]
	}
}